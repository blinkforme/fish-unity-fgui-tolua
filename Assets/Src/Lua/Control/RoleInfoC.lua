---@class RoleInfoC
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by abner.
--- DateTime: 2020-05-14 18:15
---

RoleInfoC = class("RoleInfoC")
function RoleInfoC:ctor()
    GameEventDispatch.instance:on(tostring(10004), self, self.updateProfile)
    --TODO 用到了再打开
    GameEventDispatch.instance:on(tostring(10007), self, self.syncCurrency)
    GameEventDispatch.instance:on(tostring(10008), self, self.syncRes)
    GameEventDispatch.instance:on(tostring(10009), self, self.levelUp)
    --GameEventDispatch.instance:on(tostring(14001),self,self.syncBuyData)
    --GameEventDispatch.instance:on(tostring(16001),self,self.buffSync)
    GameEventDispatch.instance:on(tostring(18001), self, self.updateGoodsItem)
    GameEventDispatch.instance:on(tostring(20001), self, self.updateSignIn)
    GameEventDispatch.instance:on(tostring(20003), self, self.signInGetAward)
    GameEventDispatch.instance:on(tostring(10011),self,self.skillResTipConfirm)
    GameEventDispatch.instance:on(tostring(15002), self, self.getReward)
    GameEventDispatch.instance:on(tostring(10021), self, self.resetAwardScore)
    GameEventDispatch.instance:on(tostring(31001), self, self.syncCoin)
    GameEventDispatch.instance:on(tostring(12047), self, self.syncCostCoin)

    GameEventDispatch.instance:on(tostring(12027), self, self.batteryChange)
    --GameEventDispatch.instance:on(tostring(41004),self,self.ifSubscription)
    GameEventDispatch.instance:on(tostring(19015), self, self.syncBindCode)
    --GameEventDispatch.instance:on(tostring(10025),self,self.syncShortRoleState)
    --GameEventDispatch.instance:on(tostring(50002),self,self.syncShortData)
    --GameEventDispatch.instance:on(tostring(50004),self,self.drawReturn)
    --GameEventDispatch.instance:on(tostring(50006),self,self.drawReturn)
    --GameEventDispatch.instance:on(tostring(50008),self,self.drawReturn)
end
function RoleInfoC:syncShortRoleState(data)
    RoleInfoM.instance().short_pf = data.short_pf
end
function RoleInfoC:syncBuyData(data)
    if data.code == 0 then
        WebSocketManager.instance():send(50001, {})
    end
end

--function RoleInfoC:batteryChange(data)
--    RoleInfoM.instance():setCurSkin(data.cskin)
--    GameEventDispatch.instance:event("changeSkin")
--end

function RoleInfoC:drawReturn(re)
    if re then
        if re.code == 1 then
            GameEventDispatch.instance:event("MsgTipContent", "奖励已领取，请勿重复领取")
        else
            if re.code == 2 then
                GameEventDispatch.instance:event("MsgTipContent", "不合法的ID")
            else
                if re.code == 3 then
                    GameEventDispatch.instance:event("MsgTipContent", "未满足领取条件")
                else
                    if re.code == 10 then
                        GameEventDispatch.instance:event("MsgTipContent", "用户身份错误")
                    end
                end
            end
        end

    end

end
function RoleInfoC:syncShortData(re)
    if re.code == 0 then
        local data = re.short_info
        RoleInfoM.instance().curDay = data.curday
        RoleInfoM.instance().total = data.short_charge_total
        RoleInfoM.instance().receive = data.sign_accept_ids
        RoleInfoM.instance().pay_accept_ids = data.pay_accept_ids
        RoleInfoM.instance().level_accept_ids = data.level_accept_ids
        RoleInfoM.instance().pay_expire = data.pay_expire
        RoleInfoM.instance().grade_expire = data.grade_expire
    end
    GameEventDispatch.instance:event("syncShortData")

end
function RoleInfoC:syncBindCode(data)
    if (data) then
        if (data.wx) then
            ExchangeM.instance:setWxBindTicket(data.wx.bind_ticket)
            ExchangeM.instance:setWxExpiredTime(data.wx.expired_time)
            ExchangeM.instance:setWxIsBind(data.wx.is_bind)
        end
        if (data.ali) then
            ExchangeM.instance:setAlipayBindTicket(data.ali.bind_ticket)
            ExchangeM.instance:setAlipayExpiredTime(data.ali.expired_time)
            ExchangeM.instance:setAlipayIsBind(data.ali.is_bind)
        end
        GameEventDispatch.instance:Event(GameEvent.SynBindCode)
    end
end
function RoleInfoC:ifSubscription(data)
    -- TODO
    if data.show == 0 or StartParam.instance:getParam("is_display_public_no_subscribe") == 0 then
        RoleInfoM.instance():setFirstSubscription(false)
        GameEventDispatch.instance:event(GameEvent.SyncSubscriptionIco)
        GameEventDispatch.instance:event(GameEvent.Closesubpanel)


    else
        if data.show == 1 then
            RoleInfoM.instance():setFirstSubscription(true)

        end
    end

end
function RoleInfoC:syncCostCoin(data)
    RoleInfoM.instance():setCostCoin(data.cost_coin)

end
function RoleInfoC:syncCoin(data)
    RoleInfoM.instance():setCoin(data.coin)
    GameEventDispatch.instance:event(GameEvent.UpdateProfile)

end
function RoleInfoC:resetAwardScore(data)
    RoleInfoM.instance():setAwardScore(0)
    GameEventDispatch.instance:event(GameEvent.UpdateProfile)

end
function RoleInfoC:getReward(data)
    if 0 == data.code then
        RoleInfoM.instance():setFcoin(data.fish_coin)
        RoleInfoM.instance():setFcount(0)
        GameEventDispatch.instance:event(GameEvent.UpdateProfile)
    end
end
function RoleInfoC:skillResTipConfirm(data)
    RoleInfoM.instance():setSkillResTip(1)
end
function RoleInfoC:updateSignIn(data)
    local protoData = {}
    protoData.award_get = data['award_get']
    protoData.day = data['day']
    RoleInfoM.instance():updateSignInData(protoData.day, protoData.award_get)
    --if data['pop_rank'] == 0 or data['pop_rank'] == 1 then
    --    LevelM.instance().isPopupRankPage = data['pop_rank']
    --end
    GameEventDispatch.instance:event(GameEvent.SignInUpdate)

end
function RoleInfoC:signInGetAward(data)
    --ConfigManager.dump_table(data)
    local protoData = data
    if 0 == protoData.code then
        RoleInfoM.instance():updateSignInData(protoData.day, protoData.award_get)
        GameEventDispatch.instance:Event(GameEvent.SignInUpdate)
    end

end
function RoleInfoC:updateGoodsItem(data)
    local protoData = data
    RoleInfoM.instance:updateGoodsItem(protoData.goods, protoData.num)
    GameEventDispatch.instance:event(GameEvent.GoodsUpdate)

end
function RoleInfoC:buffSync(data)
    local protoData = data
    GameEventDispatch.instance:event(GameEvent.BuffUpdate)

end
function RoleInfoC:levelUp(data)
    local levelInfo = data
    RoleInfoM.instance():setLevel(levelInfo.level)
    local soundPath = ConfigManager.getConfValue("cfg_global", 1, "level_up_sound")
    --GameSoundManager:playSound(soundPath)
    local countArr = LevelM.instance():getCountArr(levelInfo.level)
    local goodsArr = LevelM.instance():getGoodsArr(levelInfo.level)
    UIManager:LoadView("LevelUp", { ids = goodsArr, nums = countArr })
    GameEventDispatch.instance:Event(GameEvent.UpdateFirstCharge)
end

---@param data S2C_10008
function RoleInfoC:syncRes(data)
    local res = data
    RoleInfoM.instance():setCoin(res.coin)
    RoleInfoM.instance():setExp(res.exp)
    RoleInfoM.instance():setFcoin(res.fcoin)
    RoleInfoM.instance():setFcount(res.fcount)
    RoleInfoM.instance():setDiamond(res.diamond)
    RoleInfoM.instance():setBindCoin(res.bcoin)
    --RoleInfoM.instance():setContestScore(res.cscore)
    if res.cscore > 0  then
        local mySeat = SeatRouter.instance.mySeat
        if mySeat then
            --mySeat:setContestScore(res.cscore)
        end
    end

    GameEventDispatch.instance:Event(GameEvent.UpdateProfile)
    --    TODO GameEvent.UpdateProfile 去除
end
function RoleInfoC:syncCurrency(data)
    local currency = data
    if GameConst.currency_coin == currency.type then
        RoleInfoM.instance():setCoin(currency.num)
    end
    if GameConst.currency_diamond == currency.type then
        RoleInfoM.instance():setDiamond(currency.num)
    end
    if GameConst.currency_bind_coin == currency.type then
        RoleInfoM.instance():setBindCoin(currency.num)
    end
    GameEventDispatch.instance:Event(GameEvent.UpdateProfile)

end
function RoleInfoC:updateProfile(data)
    data = data["a"]
    local mapDic = { "name", "level", "vip", "vip_exp", "exp", "fish_coin", "battery", "coin", "skins", "cskin",
                     "diamond", "goods", "purchased_items", "vip_buy", "task_new", "task_daily", "create_time", "task_daily_ids", "charge_total", "charge_times",
                     "first_charge_reward_accepted", "skill_res_tip", "login_days", "award_score", "avatar", "red_points", "day_index", "month_card", "puuid", "exchange",
                     "bcoin", "at_coin", "wxmini_balance", 'is_set_bank_password', 'bank_gold', 'worldcup_battery_accepted', "worldcup_coin", "is_bind_tel", "tel", "guide_status" }
    --ConfigManager.dump_table(data)
    RoleInfoM.instance():init_time_skins(data[41])
    RoleInfoM.instance().coin_rate = data[42]
    RoleInfoM.instance().chance_rate = data[43]
    RoleInfoM.instance().coin_rate_buy = data[44]
    RoleInfoM.instance().chance_rate_buy = data[45]
    RoleInfoM.instance().is_bind = data[46]
    RoleInfoM.instance().bind_ticket = data[47]
    RoleInfoM.instance().expired_time = data[48]
    local obj = {}
    for i = 1, #data do
        if mapDic[i] then
            obj[mapDic[i]] = data[i]
        else
            break ;
        end
        i = i + 1
    end

    local profileData = obj
    RoleInfoM.instance():setProfileInfo(profileData)
    RoleInfoM.instance().puuid = obj["puuid"]
    GameEventDispatch.instance:event(GameEvent.UpdateProfile)
end
---@return RoleInfoC
function RoleInfoC.instance()
    if not RoleInfoC.__instance then
        RoleInfoC.__instance = RoleInfoC.New()
    end
    return RoleInfoC.__instance
end
        