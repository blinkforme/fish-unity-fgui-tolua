//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class libx_SceneAssetRequestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(libx.SceneAssetRequest), typeof(libx.AssetRequest));
		L.RegFunction("New", _Createlibx_SceneAssetRequest);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("loadSceneMode", get_loadSceneMode, null);
		L.RegVar("assetBundleName", get_assetBundleName, set_assetBundleName);
		L.RegVar("additives", get_additives, set_additives);
		L.RegVar("progress", get_progress, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Createlibx_SceneAssetRequest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				libx.SceneAssetRequest obj = new libx.SceneAssetRequest(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: libx.SceneAssetRequest.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loadSceneMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			libx.SceneAssetRequest obj = (libx.SceneAssetRequest)o;
			UnityEngine.SceneManagement.LoadSceneMode ret = obj.loadSceneMode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index loadSceneMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_assetBundleName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			libx.SceneAssetRequest obj = (libx.SceneAssetRequest)o;
			string ret = obj.assetBundleName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetBundleName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_additives(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			libx.SceneAssetRequest obj = (libx.SceneAssetRequest)o;
			System.Collections.Generic.List<libx.SceneAssetRequest> ret = obj.additives;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index additives on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_progress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			libx.SceneAssetRequest obj = (libx.SceneAssetRequest)o;
			float ret = obj.progress;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index progress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_assetBundleName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			libx.SceneAssetRequest obj = (libx.SceneAssetRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.assetBundleName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index assetBundleName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_additives(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			libx.SceneAssetRequest obj = (libx.SceneAssetRequest)o;
			System.Collections.Generic.List<libx.SceneAssetRequest> arg0 = (System.Collections.Generic.List<libx.SceneAssetRequest>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<libx.SceneAssetRequest>));
			obj.additives = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index additives on a nil value");
		}
	}
}

