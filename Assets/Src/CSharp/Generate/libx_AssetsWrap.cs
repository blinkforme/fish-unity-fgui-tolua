//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class libx_AssetsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(libx.Assets), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetAllAssetPaths", GetAllAssetPaths);
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("DownloadVersions", DownloadVersions);
		L.RegFunction("LoadVersions", LoadVersions);
		L.RegFunction("DownloadAll", DownloadAll);
		L.RegFunction("Pause", Pause);
		L.RegFunction("UnPause", UnPause);
		L.RegFunction("LoadSceneAsync", LoadSceneAsync);
		L.RegFunction("UnloadScene", UnloadScene);
		L.RegFunction("LoadAssetAsync", LoadAssetAsync);
		L.RegFunction("LoadAsset", LoadAsset);
		L.RegFunction("UnloadAsset", UnloadAsset);
		L.RegFunction("RemoveUnusedAssets", RemoveUnusedAssets);
		L.RegFunction("Download", Download);
		L.RegFunction("GetDownloadURL", GetDownloadURL);
		L.RegFunction("DumpAssets", DumpAssets);
		L.RegFunction("GetAssetsPath", GetAssetsPath);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Bundles", get_Bundles, null);
		L.RegVar("Versions", get_Versions, null);
		L.RegVar("assetLoader", get_assetLoader, set_assetLoader);
		L.RegVar("onAssetLoaded", get_onAssetLoaded, set_onAssetLoaded);
		L.RegVar("onAssetUnloaded", get_onAssetUnloaded, set_onAssetUnloaded);
		L.RegVar("versionsLoader", get_versionsLoader, set_versionsLoader);
		L.RegVar("verifyBy", get_verifyBy, set_verifyBy);
		L.RegVar("development", get_development, set_development);
		L.RegVar("updateAll", get_updateAll, set_updateAll);
		L.RegVar("enableCopyAssets", get_enableCopyAssets, set_enableCopyAssets);
		L.RegVar("loggable", get_loggable, set_loggable);
		L.RegVar("downloadURL", get_downloadURL, set_downloadURL);
		L.RegVar("currentVersion", get_currentVersion, set_currentVersion);
		L.RegVar("basePath", get_basePath, set_basePath);
		L.RegVar("updatePath", get_updatePath, set_updatePath);
		L.RegVar("patches4Init", get_patches4Init, set_patches4Init);
		L.RegVar("searchPaths", get_searchPaths, set_searchPaths);
		L.RegVar("localVersions", get_localVersions, null);
		L.RegVar("serverVersions", get_serverVersions, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllAssetPaths(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string[] o = libx.Assets.GetAllAssetPaths();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				libx.Assets.Initialize();
				return 0;
			}
			else if (count == 1)
			{
				System.Action<string> arg0 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 1);
				libx.Assets.Initialize(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: libx.Assets.Initialize");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownloadVersions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action<string> arg0 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 1);
			libx.Assets.DownloadVersions(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadVersions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			libx.Versions o = libx.Assets.LoadVersions(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownloadAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				libx.Downloader arg0 = null;
				bool o = libx.Assets.DownloadAll(out arg0);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushObject(L, arg0);
				return 2;
			}
			else if (count == 2)
			{
				string[] arg0 = ToLua.CheckStringArray(L, 1);
				libx.Downloader arg1 = null;
				bool o = libx.Assets.DownloadAll(arg0, out arg1);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.PushObject(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: libx.Assets.DownloadAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			libx.Assets.Pause();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnPause(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			libx.Assets.UnPause();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadSceneAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				libx.SceneAssetRequest o = libx.Assets.LoadSceneAsync(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				libx.SceneAssetRequest o = libx.Assets.LoadSceneAsync(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: libx.Assets.LoadSceneAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			libx.SceneAssetRequest arg0 = (libx.SceneAssetRequest)ToLua.CheckObject<libx.SceneAssetRequest>(L, 1);
			libx.Assets.UnloadScene(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAssetAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Type arg1 = ToLua.CheckMonoType(L, 2);
			libx.AssetRequest o = libx.Assets.LoadAssetAsync(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Type arg1 = ToLua.CheckMonoType(L, 2);
			libx.AssetRequest o = libx.Assets.LoadAsset(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadAsset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			libx.AssetRequest arg0 = (libx.AssetRequest)ToLua.CheckObject<libx.AssetRequest>(L, 1);
			libx.Assets.UnloadAsset(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveUnusedAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			libx.Assets.RemoveUnusedAssets();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Download(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			UnityEngine.Networking.UnityWebRequest o = libx.Assets.Download(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDownloadURL(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = libx.Assets.GetDownloadURL(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DumpAssets(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = libx.Assets.DumpAssets();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetsPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = libx.Assets.GetAssetsPath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bundles(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, libx.Assets.Bundles);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Versions(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, libx.Assets.Versions);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_assetLoader(IntPtr L)
	{
		try
		{
			ToLua.Push(L, libx.Assets.assetLoader);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onAssetLoaded(IntPtr L)
	{
		try
		{
			ToLua.Push(L, libx.Assets.onAssetLoaded);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onAssetUnloaded(IntPtr L)
	{
		try
		{
			ToLua.Push(L, libx.Assets.onAssetUnloaded);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_versionsLoader(IntPtr L)
	{
		try
		{
			ToLua.Push(L, libx.Assets.versionsLoader);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_verifyBy(IntPtr L)
	{
		try
		{
			ToLua.Push(L, libx.Assets.verifyBy);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_development(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, libx.Assets.development);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_updateAll(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, libx.Assets.updateAll);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableCopyAssets(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, libx.Assets.enableCopyAssets);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_loggable(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, libx.Assets.loggable);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_downloadURL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, libx.Assets.downloadURL);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentVersion(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, libx.Assets.currentVersion);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_basePath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, libx.Assets.basePath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_updatePath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, libx.Assets.updatePath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_patches4Init(IntPtr L)
	{
		try
		{
			ToLua.Push(L, libx.Assets.patches4Init);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_searchPaths(IntPtr L)
	{
		try
		{
			ToLua.Push(L, libx.Assets.searchPaths);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_localVersions(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, libx.Assets.localVersions);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverVersions(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, libx.Assets.serverVersions);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_assetLoader(IntPtr L)
	{
		try
		{
			System.Func<string,System.Type,UnityEngine.Object> arg0 = (System.Func<string,System.Type,UnityEngine.Object>)ToLua.CheckDelegate<System.Func<string,System.Type,UnityEngine.Object>>(L, 2);
			libx.Assets.assetLoader = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onAssetLoaded(IntPtr L)
	{
		try
		{
			System.Action<string> arg0 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 2);
			libx.Assets.onAssetLoaded = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onAssetUnloaded(IntPtr L)
	{
		try
		{
			System.Action<string> arg0 = (System.Action<string>)ToLua.CheckDelegate<System.Action<string>>(L, 2);
			libx.Assets.onAssetUnloaded = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_versionsLoader(IntPtr L)
	{
		try
		{
			System.Func<libx.Versions> arg0 = (System.Func<libx.Versions>)ToLua.CheckDelegate<System.Func<libx.Versions>>(L, 2);
			libx.Assets.versionsLoader = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_verifyBy(IntPtr L)
	{
		try
		{
			libx.VerifyBy arg0 = (libx.VerifyBy)ToLua.CheckObject(L, 2, typeof(libx.VerifyBy));
			libx.Assets.verifyBy = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_development(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			libx.Assets.development = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_updateAll(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			libx.Assets.updateAll = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableCopyAssets(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			libx.Assets.enableCopyAssets = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_loggable(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			libx.Assets.loggable = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_downloadURL(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			libx.Assets.downloadURL = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentVersion(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			libx.Assets.currentVersion = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_basePath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			libx.Assets.basePath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_updatePath(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			libx.Assets.updatePath = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_patches4Init(IntPtr L)
	{
		try
		{
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			libx.Assets.patches4Init = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_searchPaths(IntPtr L)
	{
		try
		{
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			libx.Assets.searchPaths = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

