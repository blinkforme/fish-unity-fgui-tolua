//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BestHTTP_HTTPRequestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BestHTTP.HTTPRequest), typeof(System.Object));
		L.RegFunction("AddField", AddField);
		L.RegFunction("AddBinaryData", AddBinaryData);
		L.RegFunction("SetForm", SetForm);
		L.RegFunction("GetFormFields", GetFormFields);
		L.RegFunction("ClearForm", ClearForm);
		L.RegFunction("AddHeader", AddHeader);
		L.RegFunction("SetHeader", SetHeader);
		L.RegFunction("RemoveHeader", RemoveHeader);
		L.RegFunction("HasHeader", HasHeader);
		L.RegFunction("GetFirstHeaderValue", GetFirstHeaderValue);
		L.RegFunction("GetHeaderValues", GetHeaderValues);
		L.RegFunction("RemoveHeaders", RemoveHeaders);
		L.RegFunction("SetRangeHeader", SetRangeHeader);
		L.RegFunction("EnumerateHeaders", EnumerateHeaders);
		L.RegFunction("DumpHeaders", DumpHeaders);
		L.RegFunction("GetEntityBody", GetEntityBody);
		L.RegFunction("Send", Send);
		L.RegFunction("Abort", Abort);
		L.RegFunction("Clear", Clear);
		L.RegFunction("MoveNext", MoveNext);
		L.RegFunction("Reset", Reset);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateBestHTTP_HTTPRequest);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("EOL", get_EOL, null);
		L.RegVar("MethodNames", get_MethodNames, null);
		L.RegVar("UploadChunkSize", get_UploadChunkSize, set_UploadChunkSize);
		L.RegVar("OnUploadProgress", get_OnUploadProgress, set_OnUploadProgress);
		L.RegVar("OnStreamingData", get_OnStreamingData, set_OnStreamingData);
		L.RegVar("OnHeadersReceived", get_OnHeadersReceived, set_OnHeadersReceived);
		L.RegVar("OnDownloadProgress", get_OnDownloadProgress, set_OnDownloadProgress);
		L.RegVar("OnUpgraded", get_OnUpgraded, set_OnUpgraded);
		L.RegVar("Uri", get_Uri, set_Uri);
		L.RegVar("MethodType", get_MethodType, set_MethodType);
		L.RegVar("RawData", get_RawData, set_RawData);
		L.RegVar("UploadStream", get_UploadStream, set_UploadStream);
		L.RegVar("DisposeUploadStream", get_DisposeUploadStream, set_DisposeUploadStream);
		L.RegVar("UseUploadStreamLength", get_UseUploadStreamLength, set_UseUploadStreamLength);
		L.RegVar("IsKeepAlive", get_IsKeepAlive, set_IsKeepAlive);
		L.RegVar("DisableCache", get_DisableCache, set_DisableCache);
		L.RegVar("CacheOnly", get_CacheOnly, set_CacheOnly);
		L.RegVar("StreamFragmentSize", get_StreamFragmentSize, set_StreamFragmentSize);
		L.RegVar("StreamChunksImmediately", get_StreamChunksImmediately, set_StreamChunksImmediately);
		L.RegVar("MaxFragmentQueueLength", get_MaxFragmentQueueLength, set_MaxFragmentQueueLength);
		L.RegVar("Callback", get_Callback, set_Callback);
		L.RegVar("ProcessingStarted", get_ProcessingStarted, null);
		L.RegVar("IsTimedOut", get_IsTimedOut, null);
		L.RegVar("Retries", get_Retries, null);
		L.RegVar("MaxRetries", get_MaxRetries, set_MaxRetries);
		L.RegVar("IsCancellationRequested", get_IsCancellationRequested, null);
		L.RegVar("IsRedirected", get_IsRedirected, null);
		L.RegVar("RedirectUri", get_RedirectUri, null);
		L.RegVar("CurrentUri", get_CurrentUri, null);
		L.RegVar("Response", get_Response, null);
		L.RegVar("ProxyResponse", get_ProxyResponse, null);
		L.RegVar("Exception", get_Exception, null);
		L.RegVar("Tag", get_Tag, set_Tag);
		L.RegVar("Credentials", get_Credentials, set_Credentials);
		L.RegVar("HasProxy", get_HasProxy, null);
		L.RegVar("Proxy", get_Proxy, set_Proxy);
		L.RegVar("MaxRedirects", get_MaxRedirects, set_MaxRedirects);
		L.RegVar("UseAlternateSSL", get_UseAlternateSSL, set_UseAlternateSSL);
		L.RegVar("IsCookiesEnabled", get_IsCookiesEnabled, set_IsCookiesEnabled);
		L.RegVar("Cookies", get_Cookies, set_Cookies);
		L.RegVar("FormUsage", get_FormUsage, set_FormUsage);
		L.RegVar("State", get_State, null);
		L.RegVar("RedirectCount", get_RedirectCount, null);
		L.RegVar("ConnectTimeout", get_ConnectTimeout, set_ConnectTimeout);
		L.RegVar("Timeout", get_Timeout, set_Timeout);
		L.RegVar("EnableTimoutForStreaming", get_EnableTimoutForStreaming, set_EnableTimoutForStreaming);
		L.RegVar("EnableSafeReadOnUnknownContentLength", get_EnableSafeReadOnUnknownContentLength, set_EnableSafeReadOnUnknownContentLength);
		L.RegVar("CustomCertificateVerifyer", get_CustomCertificateVerifyer, set_CustomCertificateVerifyer);
		L.RegVar("CustomClientCredentialsProvider", get_CustomClientCredentialsProvider, set_CustomClientCredentialsProvider);
		L.RegVar("CustomTLSServerNameList", get_CustomTLSServerNameList, set_CustomTLSServerNameList);
		L.RegVar("ProtocolHandler", get_ProtocolHandler, set_ProtocolHandler);
		L.RegVar("Current", get_Current, null);
		L.RegVar("CustomCertificationValidator", get_CustomCertificationValidator, set_CustomCertificationValidator);
		L.RegVar("OnBeforeRedirection", get_OnBeforeRedirection, set_OnBeforeRedirection);
		L.RegVar("OnBeforeHeaderSend", get_OnBeforeHeaderSend, set_OnBeforeHeaderSend);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBestHTTP_HTTPRequest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 1);
				BestHTTP.HTTPRequest obj = new BestHTTP.HTTPRequest(arg0);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<BestHTTP.OnRequestFinishedDelegate>(L, 2))
			{
				System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 1);
				BestHTTP.OnRequestFinishedDelegate arg1 = (BestHTTP.OnRequestFinishedDelegate)ToLua.ToObject(L, 2);
				BestHTTP.HTTPRequest obj = new BestHTTP.HTTPRequest(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<BestHTTP.HTTPMethods>(L, 2))
			{
				System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 1);
				BestHTTP.HTTPMethods arg1 = (BestHTTP.HTTPMethods)ToLua.ToObject(L, 2);
				BestHTTP.HTTPRequest obj = new BestHTTP.HTTPRequest(arg0, arg1);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<bool, BestHTTP.OnRequestFinishedDelegate>(L, 2))
			{
				System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				BestHTTP.OnRequestFinishedDelegate arg2 = (BestHTTP.OnRequestFinishedDelegate)ToLua.ToObject(L, 3);
				BestHTTP.HTTPRequest obj = new BestHTTP.HTTPRequest(arg0, arg1, arg2);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<BestHTTP.HTTPMethods, BestHTTP.OnRequestFinishedDelegate>(L, 2))
			{
				System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 1);
				BestHTTP.HTTPMethods arg1 = (BestHTTP.HTTPMethods)ToLua.ToObject(L, 2);
				BestHTTP.OnRequestFinishedDelegate arg2 = (BestHTTP.OnRequestFinishedDelegate)ToLua.ToObject(L, 3);
				BestHTTP.HTTPRequest obj = new BestHTTP.HTTPRequest(arg0, arg1, arg2);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<bool, bool, BestHTTP.OnRequestFinishedDelegate>(L, 2))
			{
				System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				BestHTTP.OnRequestFinishedDelegate arg3 = (BestHTTP.OnRequestFinishedDelegate)ToLua.ToObject(L, 4);
				BestHTTP.HTTPRequest obj = new BestHTTP.HTTPRequest(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes<BestHTTP.HTTPMethods, bool, BestHTTP.OnRequestFinishedDelegate>(L, 2))
			{
				System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 1);
				BestHTTP.HTTPMethods arg1 = (BestHTTP.HTTPMethods)ToLua.ToObject(L, 2);
				bool arg2 = LuaDLL.lua_toboolean(L, 3);
				BestHTTP.OnRequestFinishedDelegate arg3 = (BestHTTP.OnRequestFinishedDelegate)ToLua.ToObject(L, 4);
				BestHTTP.HTTPRequest obj = new BestHTTP.HTTPRequest(arg0, arg1, arg2, arg3);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else if (count == 5)
			{
				System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 1);
				BestHTTP.HTTPMethods arg1 = (BestHTTP.HTTPMethods)ToLua.CheckObject(L, 2, typeof(BestHTTP.HTTPMethods));
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				bool arg3 = LuaDLL.luaL_checkboolean(L, 4);
				BestHTTP.OnRequestFinishedDelegate arg4 = (BestHTTP.OnRequestFinishedDelegate)ToLua.CheckDelegate<BestHTTP.OnRequestFinishedDelegate>(L, 5);
				BestHTTP.HTTPRequest obj = new BestHTTP.HTTPRequest(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: BestHTTP.HTTPRequest.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddField(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.AddField(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Text.Encoding arg2 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 4);
				obj.AddField(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BestHTTP.HTTPRequest.AddField");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBinaryData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				obj.AddBinaryData(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				obj.AddBinaryData(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
				string arg0 = ToLua.CheckString(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				string arg2 = ToLua.CheckString(L, 4);
				string arg3 = ToLua.CheckString(L, 5);
				obj.AddBinaryData(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BestHTTP.HTTPRequest.AddBinaryData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetForm(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			BestHTTP.Forms.HTTPFormBase arg0 = (BestHTTP.Forms.HTTPFormBase)ToLua.CheckObject<BestHTTP.Forms.HTTPFormBase>(L, 2);
			obj.SetForm(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFormFields(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			System.Collections.Generic.List<BestHTTP.Forms.HTTPFieldData> o = obj.GetFormFields();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearForm(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			obj.ClearForm();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHeader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.AddHeader(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetHeader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetHeader(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveHeader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.RemoveHeader(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasHeader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasHeader(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFirstHeaderValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetFirstHeaderValue(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeaderValues(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			string arg0 = ToLua.CheckString(L, 2);
			System.Collections.Generic.List<string> o = obj.GetHeaderValues(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveHeaders(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			obj.RemoveHeaders();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRangeHeader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
				long arg0 = LuaDLL.tolua_checkint64(L, 2);
				obj.SetRangeHeader(arg0);
				return 0;
			}
			else if (count == 3)
			{
				BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
				long arg0 = LuaDLL.tolua_checkint64(L, 2);
				long arg1 = LuaDLL.tolua_checkint64(L, 3);
				obj.SetRangeHeader(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BestHTTP.HTTPRequest.SetRangeHeader");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnumerateHeaders(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
				BestHTTP.OnHeaderEnumerationDelegate arg0 = (BestHTTP.OnHeaderEnumerationDelegate)ToLua.CheckDelegate<BestHTTP.OnHeaderEnumerationDelegate>(L, 2);
				obj.EnumerateHeaders(arg0);
				return 0;
			}
			else if (count == 3)
			{
				BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
				BestHTTP.OnHeaderEnumerationDelegate arg0 = (BestHTTP.OnHeaderEnumerationDelegate)ToLua.CheckDelegate<BestHTTP.OnHeaderEnumerationDelegate>(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				obj.EnumerateHeaders(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BestHTTP.HTTPRequest.EnumerateHeaders");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DumpHeaders(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			string o = obj.DumpHeaders();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEntityBody(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			byte[] o = obj.GetEntityBody();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			BestHTTP.HTTPRequest o = obj.Send();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Abort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			obj.Abort();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveNext(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			bool o = obj.MoveNext();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EOL(IntPtr L)
	{
		try
		{
			ToLua.Push(L, BestHTTP.HTTPRequest.EOL);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MethodNames(IntPtr L)
	{
		try
		{
			ToLua.Push(L, BestHTTP.HTTPRequest.MethodNames);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UploadChunkSize(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, BestHTTP.HTTPRequest.UploadChunkSize);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnUploadProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnUploadProgressDelegate ret = obj.OnUploadProgress;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnUploadProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnStreamingData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnStreamingDataDelegate ret = obj.OnStreamingData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnStreamingData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnHeadersReceived(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Action<BestHTTP.HTTPRequest,BestHTTP.HTTPResponse> ret = obj.OnHeadersReceived;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnHeadersReceived on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnDownloadProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnDownloadProgressDelegate ret = obj.OnDownloadProgress;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDownloadProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnUpgraded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnRequestFinishedDelegate ret = obj.OnUpgraded;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnUpgraded on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Uri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Uri ret = obj.Uri;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Uri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MethodType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.HTTPMethods ret = obj.MethodType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MethodType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RawData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			byte[] ret = obj.RawData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RawData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UploadStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.IO.Stream ret = obj.UploadStream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UploadStream on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DisposeUploadStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.DisposeUploadStream;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DisposeUploadStream on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseUploadStreamLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.UseUploadStreamLength;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseUploadStreamLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsKeepAlive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.IsKeepAlive;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsKeepAlive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DisableCache(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.DisableCache;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DisableCache on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CacheOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.CacheOnly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CacheOnly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StreamFragmentSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int ret = obj.StreamFragmentSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StreamFragmentSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StreamChunksImmediately(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.StreamChunksImmediately;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StreamChunksImmediately on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxFragmentQueueLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int ret = obj.MaxFragmentQueueLength;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxFragmentQueueLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Callback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnRequestFinishedDelegate ret = obj.Callback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Callback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProcessingStarted(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.DateTime ret = obj.ProcessingStarted;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProcessingStarted on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsTimedOut(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.IsTimedOut;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsTimedOut on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Retries(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int ret = obj.Retries;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Retries on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxRetries(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int ret = obj.MaxRetries;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxRetries on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsCancellationRequested(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.IsCancellationRequested;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsCancellationRequested on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsRedirected(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.IsRedirected;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsRedirected on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RedirectUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Uri ret = obj.RedirectUri;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RedirectUri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Uri ret = obj.CurrentUri;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentUri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Response(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.HTTPResponse ret = obj.Response;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Response on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProxyResponse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.HTTPResponse ret = obj.ProxyResponse;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProxyResponse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Exception(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Exception ret = obj.Exception;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Exception on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			object ret = obj.Tag;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Tag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Credentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.Authentication.Credentials ret = obj.Credentials;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Credentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasProxy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.HasProxy;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasProxy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Proxy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.Proxy ret = obj.Proxy;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Proxy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxRedirects(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int ret = obj.MaxRedirects;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxRedirects on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseAlternateSSL(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.UseAlternateSSL;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseAlternateSSL on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsCookiesEnabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.IsCookiesEnabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsCookiesEnabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Cookies(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Collections.Generic.List<BestHTTP.Cookies.Cookie> ret = obj.Cookies;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Cookies on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FormUsage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.Forms.HTTPFormUsage ret = obj.FormUsage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FormUsage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.HTTPRequestStates ret = obj.State;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RedirectCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int ret = obj.RedirectCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RedirectCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.TimeSpan ret = obj.ConnectTimeout;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnectTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Timeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.TimeSpan ret = obj.Timeout;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Timeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnableTimoutForStreaming(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.EnableTimoutForStreaming;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EnableTimoutForStreaming on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnableSafeReadOnUnknownContentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool ret = obj.EnableSafeReadOnUnknownContentLength;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EnableSafeReadOnUnknownContentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CustomCertificateVerifyer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.SecureProtocol.Org.BouncyCastle.Crypto.Tls.ICertificateVerifyer ret = obj.CustomCertificateVerifyer;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CustomCertificateVerifyer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CustomClientCredentialsProvider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.SecureProtocol.Org.BouncyCastle.Crypto.Tls.IClientCredentialsProvider ret = obj.CustomClientCredentialsProvider;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CustomClientCredentialsProvider on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CustomTLSServerNameList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Collections.Generic.List<string> ret = obj.CustomTLSServerNameList;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CustomTLSServerNameList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolHandler(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.Connections.SupportedProtocols ret = obj.ProtocolHandler;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProtocolHandler on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Current(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			object ret = obj.Current;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Current on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CustomCertificationValidator(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Func<BestHTTP.HTTPRequest,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,bool>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnBeforeRedirection(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(BestHTTP.OnBeforeRedirectionDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnBeforeHeaderSend(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(BestHTTP.OnBeforeHeaderSendDelegate)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UploadChunkSize(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			BestHTTP.HTTPRequest.UploadChunkSize = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnUploadProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnUploadProgressDelegate arg0 = (BestHTTP.OnUploadProgressDelegate)ToLua.CheckDelegate<BestHTTP.OnUploadProgressDelegate>(L, 2);
			obj.OnUploadProgress = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnUploadProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnStreamingData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnStreamingDataDelegate arg0 = (BestHTTP.OnStreamingDataDelegate)ToLua.CheckDelegate<BestHTTP.OnStreamingDataDelegate>(L, 2);
			obj.OnStreamingData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnStreamingData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnHeadersReceived(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Action<BestHTTP.HTTPRequest,BestHTTP.HTTPResponse> arg0 = (System.Action<BestHTTP.HTTPRequest,BestHTTP.HTTPResponse>)ToLua.CheckDelegate<System.Action<BestHTTP.HTTPRequest,BestHTTP.HTTPResponse>>(L, 2);
			obj.OnHeadersReceived = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnHeadersReceived on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnDownloadProgress(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnDownloadProgressDelegate arg0 = (BestHTTP.OnDownloadProgressDelegate)ToLua.CheckDelegate<BestHTTP.OnDownloadProgressDelegate>(L, 2);
			obj.OnDownloadProgress = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnDownloadProgress on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnUpgraded(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnRequestFinishedDelegate arg0 = (BestHTTP.OnRequestFinishedDelegate)ToLua.CheckDelegate<BestHTTP.OnRequestFinishedDelegate>(L, 2);
			obj.OnUpgraded = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnUpgraded on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Uri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 2);
			obj.Uri = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Uri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MethodType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.HTTPMethods arg0 = (BestHTTP.HTTPMethods)ToLua.CheckObject(L, 2, typeof(BestHTTP.HTTPMethods));
			obj.MethodType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MethodType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RawData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.RawData = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RawData on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UploadStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.IO.Stream arg0 = (System.IO.Stream)ToLua.CheckObject<System.IO.Stream>(L, 2);
			obj.UploadStream = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UploadStream on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DisposeUploadStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.DisposeUploadStream = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DisposeUploadStream on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseUploadStreamLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UseUploadStreamLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseUploadStreamLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsKeepAlive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsKeepAlive = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsKeepAlive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DisableCache(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.DisableCache = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DisableCache on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CacheOnly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CacheOnly = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CacheOnly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StreamFragmentSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.StreamFragmentSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StreamFragmentSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StreamChunksImmediately(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.StreamChunksImmediately = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StreamChunksImmediately on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxFragmentQueueLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MaxFragmentQueueLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxFragmentQueueLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Callback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.OnRequestFinishedDelegate arg0 = (BestHTTP.OnRequestFinishedDelegate)ToLua.CheckDelegate<BestHTTP.OnRequestFinishedDelegate>(L, 2);
			obj.Callback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Callback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxRetries(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MaxRetries = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxRetries on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Tag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Tag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Tag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Credentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.Authentication.Credentials arg0 = (BestHTTP.Authentication.Credentials)ToLua.CheckObject(L, 2, typeof(BestHTTP.Authentication.Credentials));
			obj.Credentials = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Credentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Proxy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.Proxy arg0 = (BestHTTP.Proxy)ToLua.CheckObject<BestHTTP.Proxy>(L, 2);
			obj.Proxy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Proxy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxRedirects(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MaxRedirects = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxRedirects on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseAlternateSSL(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UseAlternateSSL = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseAlternateSSL on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsCookiesEnabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsCookiesEnabled = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsCookiesEnabled on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Cookies(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Collections.Generic.List<BestHTTP.Cookies.Cookie> arg0 = (System.Collections.Generic.List<BestHTTP.Cookies.Cookie>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<BestHTTP.Cookies.Cookie>));
			obj.Cookies = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Cookies on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FormUsage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.Forms.HTTPFormUsage arg0 = (BestHTTP.Forms.HTTPFormUsage)ToLua.CheckObject(L, 2, typeof(BestHTTP.Forms.HTTPFormUsage));
			obj.FormUsage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FormUsage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConnectTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.TimeSpan arg0 = StackTraits<System.TimeSpan>.Check(L, 2);
			obj.ConnectTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnectTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Timeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.TimeSpan arg0 = StackTraits<System.TimeSpan>.Check(L, 2);
			obj.Timeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Timeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnableTimoutForStreaming(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.EnableTimoutForStreaming = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EnableTimoutForStreaming on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnableSafeReadOnUnknownContentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.EnableSafeReadOnUnknownContentLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EnableSafeReadOnUnknownContentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CustomCertificateVerifyer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.SecureProtocol.Org.BouncyCastle.Crypto.Tls.ICertificateVerifyer arg0 = (BestHTTP.SecureProtocol.Org.BouncyCastle.Crypto.Tls.ICertificateVerifyer)ToLua.CheckObject<BestHTTP.SecureProtocol.Org.BouncyCastle.Crypto.Tls.ICertificateVerifyer>(L, 2);
			obj.CustomCertificateVerifyer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CustomCertificateVerifyer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CustomClientCredentialsProvider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.SecureProtocol.Org.BouncyCastle.Crypto.Tls.IClientCredentialsProvider arg0 = (BestHTTP.SecureProtocol.Org.BouncyCastle.Crypto.Tls.IClientCredentialsProvider)ToLua.CheckObject<BestHTTP.SecureProtocol.Org.BouncyCastle.Crypto.Tls.IClientCredentialsProvider>(L, 2);
			obj.CustomClientCredentialsProvider = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CustomClientCredentialsProvider on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CustomTLSServerNameList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			System.Collections.Generic.List<string> arg0 = (System.Collections.Generic.List<string>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<string>));
			obj.CustomTLSServerNameList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CustomTLSServerNameList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ProtocolHandler(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)o;
			BestHTTP.Connections.SupportedProtocols arg0 = (BestHTTP.Connections.SupportedProtocols)ToLua.CheckObject(L, 2, typeof(BestHTTP.Connections.SupportedProtocols));
			obj.ProtocolHandler = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProtocolHandler on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CustomCertificationValidator(IntPtr L)
	{
		try
		{
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'BestHTTP.HTTPRequest.CustomCertificationValidator' can only appear on the left hand side of += or -= when used outside of the type 'BestHTTP.HTTPRequest'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Func<BestHTTP.HTTPRequest,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,bool> ev = (System.Func<BestHTTP.HTTPRequest,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,bool>)arg0.func;
				obj.CustomCertificationValidator += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Func<BestHTTP.HTTPRequest,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,bool> ev = (System.Func<BestHTTP.HTTPRequest,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,bool>)arg0.func;
				obj.CustomCertificationValidator -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnBeforeRedirection(IntPtr L)
	{
		try
		{
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'BestHTTP.HTTPRequest.OnBeforeRedirection' can only appear on the left hand side of += or -= when used outside of the type 'BestHTTP.HTTPRequest'");
			}

			if (arg0.op == EventOp.Add)
			{
				BestHTTP.OnBeforeRedirectionDelegate ev = (BestHTTP.OnBeforeRedirectionDelegate)arg0.func;
				obj.OnBeforeRedirection += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				BestHTTP.OnBeforeRedirectionDelegate ev = (BestHTTP.OnBeforeRedirectionDelegate)arg0.func;
				obj.OnBeforeRedirection -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnBeforeHeaderSend(IntPtr L)
	{
		try
		{
			BestHTTP.HTTPRequest obj = (BestHTTP.HTTPRequest)ToLua.CheckObject(L, 1, typeof(BestHTTP.HTTPRequest));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'BestHTTP.HTTPRequest.OnBeforeHeaderSend' can only appear on the left hand side of += or -= when used outside of the type 'BestHTTP.HTTPRequest'");
			}

			if (arg0.op == EventOp.Add)
			{
				BestHTTP.OnBeforeHeaderSendDelegate ev = (BestHTTP.OnBeforeHeaderSendDelegate)arg0.func;
				obj.OnBeforeHeaderSend += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				BestHTTP.OnBeforeHeaderSendDelegate ev = (BestHTTP.OnBeforeHeaderSendDelegate)arg0.func;
				obj.OnBeforeHeaderSend -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

