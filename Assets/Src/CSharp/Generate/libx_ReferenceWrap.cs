//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class libx_ReferenceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(libx.Reference), typeof(System.Object));
		L.RegFunction("IsUnused", IsUnused);
		L.RegFunction("Retain", Retain);
		L.RegFunction("Release", Release);
		L.RegFunction("Require", Require);
		L.RegFunction("Dequire", Dequire);
		L.RegFunction("New", _Createlibx_Reference);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("name", get_name, set_name);
		L.RegVar("refCount", get_refCount, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Createlibx_Reference(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				libx.Reference obj = new libx.Reference();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: libx.Reference.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsUnused(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			libx.Reference obj = (libx.Reference)ToLua.CheckObject<libx.Reference>(L, 1);
			bool o = obj.IsUnused();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Retain(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			libx.Reference obj = (libx.Reference)ToLua.CheckObject<libx.Reference>(L, 1);
			obj.Retain();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Release(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			libx.Reference obj = (libx.Reference)ToLua.CheckObject<libx.Reference>(L, 1);
			obj.Release();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Require(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			libx.Reference obj = (libx.Reference)ToLua.CheckObject<libx.Reference>(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
			obj.Require(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dequire(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			libx.Reference obj = (libx.Reference)ToLua.CheckObject<libx.Reference>(L, 1);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 2);
			obj.Dequire(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			libx.Reference obj = (libx.Reference)o;
			string ret = obj.name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_refCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			libx.Reference obj = (libx.Reference)o;
			int ret = obj.refCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index refCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			libx.Reference obj = (libx.Reference)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index name on a nil value");
		}
	}
}

