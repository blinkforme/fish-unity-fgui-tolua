//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BestHTTP_WebSocket_WebSocketStatesWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(BestHTTP.WebSocket.WebSocketStates));
		L.RegVar("Connecting", get_Connecting, null);
		L.RegVar("Open", get_Open, null);
		L.RegVar("Closing", get_Closing, null);
		L.RegVar("Closed", get_Closed, null);
		L.RegVar("Unknown", get_Unknown, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<BestHTTP.WebSocket.WebSocketStates>.Check = CheckType;
		StackTraits<BestHTTP.WebSocket.WebSocketStates>.Push = Push;
	}

	static void Push(IntPtr L, BestHTTP.WebSocket.WebSocketStates arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(BestHTTP.WebSocket.WebSocketStates), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Connecting(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStates.Connecting);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Open(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStates.Open);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Closing(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStates.Closing);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Closed(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStates.Closed);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Unknown(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStates.Unknown);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		BestHTTP.WebSocket.WebSocketStates o = (BestHTTP.WebSocket.WebSocketStates)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

