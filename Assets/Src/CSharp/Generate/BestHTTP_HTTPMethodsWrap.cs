//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BestHTTP_HTTPMethodsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(BestHTTP.HTTPMethods));
		L.RegVar("Get", get_Get, null);
		L.RegVar("Head", get_Head, null);
		L.RegVar("Post", get_Post, null);
		L.RegVar("Put", get_Put, null);
		L.RegVar("Delete", get_Delete, null);
		L.RegVar("Patch", get_Patch, null);
		L.RegVar("Merge", get_Merge, null);
		L.RegVar("Options", get_Options, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<BestHTTP.HTTPMethods>.Check = CheckType;
		StackTraits<BestHTTP.HTTPMethods>.Push = Push;
	}

	static void Push(IntPtr L, BestHTTP.HTTPMethods arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(BestHTTP.HTTPMethods), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Get(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.HTTPMethods.Get);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Head(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.HTTPMethods.Head);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Post(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.HTTPMethods.Post);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Put(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.HTTPMethods.Put);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Delete(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.HTTPMethods.Delete);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Patch(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.HTTPMethods.Patch);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Merge(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.HTTPMethods.Merge);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Options(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.HTTPMethods.Options);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		BestHTTP.HTTPMethods o = (BestHTTP.HTTPMethods)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

