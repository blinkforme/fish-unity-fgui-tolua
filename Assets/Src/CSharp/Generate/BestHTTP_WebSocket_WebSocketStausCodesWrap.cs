//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BestHTTP_WebSocket_WebSocketStausCodesWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(BestHTTP.WebSocket.WebSocketStausCodes));
		L.RegVar("NormalClosure", get_NormalClosure, null);
		L.RegVar("GoingAway", get_GoingAway, null);
		L.RegVar("ProtocolError", get_ProtocolError, null);
		L.RegVar("WrongDataType", get_WrongDataType, null);
		L.RegVar("Reserved", get_Reserved, null);
		L.RegVar("NoStatusCode", get_NoStatusCode, null);
		L.RegVar("ClosedAbnormally", get_ClosedAbnormally, null);
		L.RegVar("DataError", get_DataError, null);
		L.RegVar("PolicyError", get_PolicyError, null);
		L.RegVar("TooBigMessage", get_TooBigMessage, null);
		L.RegVar("ExtensionExpected", get_ExtensionExpected, null);
		L.RegVar("WrongRequest", get_WrongRequest, null);
		L.RegVar("TLSHandshakeError", get_TLSHandshakeError, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<BestHTTP.WebSocket.WebSocketStausCodes>.Check = CheckType;
		StackTraits<BestHTTP.WebSocket.WebSocketStausCodes>.Push = Push;
	}

	static void Push(IntPtr L, BestHTTP.WebSocket.WebSocketStausCodes arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(BestHTTP.WebSocket.WebSocketStausCodes), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NormalClosure(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.NormalClosure);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GoingAway(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.GoingAway);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolError(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.ProtocolError);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WrongDataType(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.WrongDataType);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Reserved(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.Reserved);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoStatusCode(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.NoStatusCode);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClosedAbnormally(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.ClosedAbnormally);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DataError(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.DataError);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PolicyError(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.PolicyError);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TooBigMessage(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.TooBigMessage);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExtensionExpected(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.ExtensionExpected);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WrongRequest(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.WrongRequest);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TLSHandshakeError(IntPtr L)
	{
		ToLua.Push(L, BestHTTP.WebSocket.WebSocketStausCodes.TLSHandshakeError);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		BestHTTP.WebSocket.WebSocketStausCodes o = (BestHTTP.WebSocket.WebSocketStausCodes)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

